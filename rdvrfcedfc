const {
  expectEvent, // Assertions for emitted events
  time,
  expectRevert,
  balance,
  BN
} = require("@openzeppelin/test-helpers");
var chai = require("chai");
const { web3, artifacts } = require("hardhat");
var expect = chai.expect;
const Swag_Token_CONTRACT = artifacts.require("Cmpk");
const MetalVest_CONTRACT = artifacts.require("MetalVest");

contract("Swag Vesting Conrtact Testing", async (accounts) => {
  const owner = accounts[0];
  const PK =
    "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80";

  before(async function () {
    swag_Token_Intance = await Swag_Token_CONTRACT.new(owner);
    vesting_Instance = await MetalVest_CONTRACT.new(
      owner,
      owner,
      swag_Token_Intance.address,
      "10000000000000000000",
      "12000000000000000000"
    );
  });

  function testAccount(account) {
    return accounts[account + 1];
  }

  describe(" <----------------------> S W A G  -  V E S T I N G  -  T E S T I N G  <----------------------> ", () => {
    it(" ", async () => {
      let claimRate = s(web3.utils.toWei("10", "ether"));
      let vest_rate = s(web3.utils.toWei("12", "ether"));
      let intervalData = s(await vesting_Instance.interval());

      async function updateClaimAndVestRate(_claimRate, _vestRate) {
        _claimRate = s(BigInt(toWei(_claimRate)));
        _vestRate = s(BigInt(toWei(_vestRate)));
        await vesting_Instance.setClaimRate(_claimRate);
        await vesting_Instance.setVestRate(_vestRate);
        claimRate = _claimRate;
        vest_rate = _vestRate;
        const afterClaimRate = await vesting_Instance.claimRate();
        const afterVestRate = await vesting_Instance.vestRate();

        expectData(0, afterClaimRate, _claimRate);

        expectData(0, afterVestRate, _vestRate);
      }

      function convertToFixed(_data) {
        return (_data / 1e18).toFixed();
      }

      function s(data) {
        return String(data);
      }

      function n(data) {
        return Number(data);
      }

      function toWei(_amount) {
        return web3.utils.toWei(s(_amount), "ether");
      }

      async function createValidSignature(
        _userAddress,
        _tokenAddress,
        _amount,
        _deadline
      ) {
        const nonce = (await vesting_Instance.nonce(_userAddress)).toString();
        const chainId = await web3.eth.getChainId();

        const typedData = {
          types: {
            EIP712Domain: [
              { name: "name", type: "string" },
              { name: "version", type: "string" },
              { name: "chainId", type: "uint256" },
              { name: "verifyingContract", type: "address" }
            ],
            Claim: [
              { name: "user", type: "address" },
              { name: "token", type: "address" },
              { name: "amount", type: "uint256" },
              { name: "deadline", type: "uint256" },
              { name: "nonce", type: "uint256" }
            ]
          },
          primaryType: "Claim",
          domain: {
            name: "Metal",
            version: "1",
            chainId: chainId,
            verifyingContract: vesting_Instance.address
          },
          message: {
            user: _userAddress,
            token: _tokenAddress,
            amount: s(_amount),
            deadline: s(_deadline),
            nonce: nonce
          }
        };

        const signature = await network.provider.send("eth_signTypedData_v4", [
          owner,
          typedData
        ]);

        const recoveredSigner = await vesting_Instance.sigOwner(
          _userAddress,
          _tokenAddress,
          _amount,
          _deadline,
          signature
        );

        expect(s(recoveredSigner)).equal(s(owner));

        return signature;
      }

      async function userData(_user) {
        const userInfo = await vesting_Instance.userInfo(_user);

        return {
          stakeId: s(userInfo[0]),
          totalStake: s(userInfo[1]),
          totalClaim: s(userInfo[2])
        };
      }

      async function stakeData(_user, _stakeId) {
        const stakeInfo = await vesting_Instance.stakeInfo(_user, _stakeId);
        return {
          active: s(stakeInfo[0]),
          amount: s(stakeInfo[1]),
          period: s(stakeInfo[2]),
          rate: s(stakeInfo[3]),
          lastClaim: s(stakeInfo[4]),
          paidOut: s(stakeInfo[5]),
          vestInterval: s(stakeInfo[6])
        };
      }

      function calculateInitialAmount(_claimRate, _userAmount) {
        const initialClaimAmount = BigInt(
          (n(claimRate) * n(_userAmount)) / toWei("100")
        );
        const userMonthlyClaimAmount = BigInt(
          n(n(n(_userAmount) - n(initialClaimAmount)) * n(vest_rate)) /
            n(web3.utils.toWei("100", "ether"))
        );

        return {
          initialClaimAmount: s(initialClaimAmount),
          userVestingAmount: s(
            BigInt(
              n(_userAmount) -
                n(
                  (n(claimRate) * n(_userAmount)) /
                    web3.utils.toWei("100", "ether")
                )
            )
          ),
          userMonthlyClaimAmount
        };
      }

      async function calculateVestingData(_user) {
        const userInfo = await userData(_user);
        const stakeInfo = await stakeData(_user, userInfo.stakeId);

        console.log("🧁 n(await time.latest())", n(await time.latest()));
        console.log("🍕  n(stakeInfo.lastClaim)", n(stakeInfo.lastClaim));
        console.log("🦄  n(intervalData)", n(intervalData));
        const remainingDays = (
          (n(await time.latest()) - n(stakeInfo.lastClaim)) /
          n(intervalData)
        ).toFixed();

        console.log("🧅 n(stakeInfo.amount)", n(stakeInfo.amount));
        console.log("🫒 n(remainingDays)", n(remainingDays));
        console.log("🍅 n(stakeInfo.rate)", n(stakeInfo.rate));
        let vestAmount = BigInt(
          (n(stakeInfo.amount) * n(remainingDays) * n(stakeInfo.rate)) /
            toWei("100")
        );

        const dueAmount = n(stakeInfo.amount) - n(stakeInfo.paidOut);

        if (n(vestAmount) > n(dueAmount)) vestAmount = dueAmount;

        return {
          vestAmount,
          remainingDays
        };
      }

      //SIGNATURE FUNCTIONS END

      async function claim(_user, _amount, _deadline, _sig, _tokenInstance) {
        await adminDeposit(_tokenInstance, _amount);
        const beforeNonce = s(await vesting_Instance.nonce(_user));
        const beforeUserData = await userData(_user);
        const beforeBalanceUser = await balanceOf(_tokenInstance, _user);
        const beforeStakeData = await stakeData(_user, beforeUserData.stakeId);

        const tx = await vesting_Instance.claim(
          _user,
          _amount,
          _deadline,
          _sig,
          { from: _user }
        );
        const afterUserData = await userData(_user);

        const afterBalanceUser = await balanceOf(_tokenInstance, _user);
        const userExpectedClaimAmount = calculateInitialAmount(
          claimRate,
          _amount
        );

        const afterNonce = s(await vesting_Instance.nonce(_user));
        const afterStakeData = await stakeData(_user, afterUserData.stakeId);

        expectData(
          convertToFixed(beforeBalanceUser),
          convertToFixed(afterBalanceUser),
          convertToFixed(userExpectedClaimAmount.initialClaimAmount)
        );
        expectData(beforeNonce, afterNonce, s(n(beforeNonce) + n(1)));
        expectData(
          s(beforeUserData.stakeId),
          s(afterUserData.stakeId),
          s(n(beforeUserData.stakeId) + n(1))
        );
        expectData(s(true), s(afterStakeData.active));
        expectData(
          convertToFixed(beforeStakeData.amount),
          convertToFixed(afterStakeData.amount),
          convertToFixed(userExpectedClaimAmount.userVestingAmount)
        );
        expectData(s(0), s(n(await time.latest())), s(afterStakeData.period));
        expectData(s(0), s(afterStakeData.rate), s(vest_rate));
        expect(s(afterStakeData.vestInterval)).equal(s(intervalData));
        expectData(s(0), s(n(await time.latest())), s(afterStakeData.period));
        expectData(s(0), s(0), s(afterStakeData.paidOut));
        expectEvent(tx, "Staked", {
          user: s(_user),
          stakeId: s(afterUserData.stakeId),
          amount: s(BigInt(userExpectedClaimAmount.userVestingAmount))
        });
        expectEvent(tx, "Claimed", {
          user: s(_user),
          to: s(_user),
          amount: s(userExpectedClaimAmount.initialClaimAmount)
        });
      }

      async function adminDeposit(_tokenInstance, _amount) {
        await approve(_tokenInstance, vesting_Instance.address, _amount, owner);
        const beforeBalance = await balanceOf(
          _tokenInstance,
          vesting_Instance.address
        );
        await vesting_Instance.adminDeposit(_tokenInstance.address, _amount);
        const afterBalance = await balanceOf(
          _tokenInstance,
          vesting_Instance.address
        );
        expectData(
          (n(beforeBalance) / 1e18).toFixed(),
          (n(afterBalance) / 1e18).toFixed(),
          (n(_amount) / 1e18).toFixed()
        );
      }

      async function emergencyWithdraw(_tokenInstane, _amount) {
        const beforeBalance = balanceOf(
          _tokenInstane,
          vesting_Instance.address
        );
        await vesting_Instance.retrive(_tokenInstane.address, owner, _amount, {
          from: owner
        });
        const afterBalance = balanceOf(_tokenInstane, vesting_Instance.address);
        expectData(beforeBalance, afterBalance, _amount);
      }

      async function deadlineTime(expiry) {
        return String(
          Number(await time.latest()) + Number(time.duration.seconds(expiry))
        );
      }

      function expectData(_beforeBalance, _afterBalance, expectedAmount) {
        expect(String(Number(_afterBalance) - Number(_beforeBalance))).equal(
          String(Number(expectedAmount))
        );
      }

      async function ownerTransfer(_tokenInstance, _user, _amount) {
        const beforeBalance = await balanceOf(_tokenInstance, _user);
        await _tokenInstance.transfer(_user, _amount, { from: owner });
        const afterBalance = await balanceOf(_tokenInstance, _user);
        expectData(beforeBalance, afterBalance, _amount);
      }

      async function approve(_tokenInstance, _spendor, _amount, _user) {
        await _tokenInstance.approve(_spendor, _amount, { from: _user });
        await checkAllowance(_tokenInstance, _user, _spendor, _amount);
      }

      async function balanceOf(_tokenInstance, _user) {
        return String(await _tokenInstance.balanceOf(_user));
      }

      async function checkAllowance(_tokenInstance, _from, _to, _amount) {
        const expectedAmount = await _tokenInstance.allowance(_from, _to);
        expect(String(expectedAmount)).equal(String(_amount));
      }

      async function claimVesting(_user) {
        const userInfo = await userData(_user);
        const stakeInfo = await stakeData(_user, userInfo.stakeId);

        expect(s(stakeInfo.active)).equal(s(true));

        const vestData = await calculateVestingData(_user);

        const beforeBalance = await balanceOf(swag_Token_Intance, _user);

        const tx = await vesting_Instance.release(userInfo.stakeId, {
          from: _user
        });
        const afterBalance = await balanceOf(swag_Token_Intance, _user);
        const afterStakeInfo = await stakeData(_user, userInfo.stakeId);
        const afterUserInfo = await userData(_user);

        console.log("🪲 vestData.vestAmount", vestData.vestAmount);
        console.log("🍋 afterBalance", afterBalance);
        console.log("🍄 beforeBalance", beforeBalance);
        expectData(beforeBalance, afterBalance, vestData.vestAmount);

        expectData(
          stakeInfo.paidOut,
          afterStakeInfo.paidOut,
          vestData.vestAmount
        );
        expectData(
          userInfo.totalClaim,
          afterUserInfo.totalClaim,
          vestData.vestAmount
        );

        console.log("🤖 vestData.remainingDays", n(vestData.remainingDays));
        console.log("🔥 stakeInfo.vestInterval", n(stakeInfo.vestInterval));
        console.log(
          "n(vestData.remainingDays) * n(stakeInfo.vestInterval)",
          n(vestData.remainingDays) * n(stakeInfo.vestInterval)
        );

        expectData(
          0,
          afterStakeInfo.lastClaim,
          n(vestData.remainingDays) * n(stakeInfo.vestInterval)
        );

        expectEvent(tx, "Released", {
          user: s(_user),
          stakeId: s(userInfo.stakeId),
          amount: s(vestData.vestAmount)
        });
      }

      describe(" <----------------------> ██▓▓▒▒▒▒░░░░░░      C O N S T R U C T O R        ░░░░░░▒▒▒▒▓▓██ <----------------------> ", function () {
        describe(" ", function () {
          it(" ------- Expecting Contract that Constructor Variables are Setted Correctly ... !  ------- ", async () => {
            const expectedOwner = s(owner);
            const expectedSigner = s(owner);
            const expectedToken = s(swag_Token_Intance.address);
            const expectedClaimRate = s(claimRate);
            const expectedvestRate = s(vest_rate);

            expect(expectedOwner).equal(s(await vesting_Instance.owner()));
            expect(expectedSigner).equal(s(await vesting_Instance.signer()));
            expect(expectedToken).equal(
              s(await vesting_Instance.nativeToken())
            );
            expect(expectedClaimRate).equal(
              s(await vesting_Instance.claimRate())
            );
            expect(expectedvestRate).equal(
              s(await vesting_Instance.vestRate())
            );
          });

          it(" ------- Expecting Contract that Constructor DEFAULT Variables are Setted Correctly .. !  ------- ", async function () {
            const expectedExpiry = s(300);
            const expectedInterval = s(time.duration.days(30));
            expect(expectedExpiry).equal(s(await vesting_Instance.expiry()));
            expect(expectedInterval).equal(s(intervalData));
          });
        });
      });

      describe(" <----------------------> ██▓▓▒▒▒▒░░░░░░   C L A I M   F U N C T I O N     ░░░░░░▒▒▒▒▓▓██ <----------------------> ", function () {
        describe(" ", function () {
          it(` ------- User - 1 is Claimng With Amount Of 130 Tokens at ClaimRate : ${
            claimRate / 1e18
          } And VestRate : ${vest_rate / 1e18} ------- `, async () => {
            const user = testAccount(1);

            const amount = web3.utils.toWei("130", "ether");
            const deadline = await deadlineTime("20");
            const sigData = await createValidSignature(
              user,
              swag_Token_Intance.address,
              amount,
              deadline
            );
            await claim(user, amount, deadline, sigData, swag_Token_Intance);
          });

          it(` ------- User - 2 is Claimng With Amount Of 2300 Tokens at ClaimRate : ${
            claimRate / 1e18
          } And VestRate : ${vest_rate / 1e18}  ------- `, async () => {
            const user = testAccount(2);

            const amount = s(BigInt(toWei("2300", "ether")));

            const deadline = await deadlineTime("20");
            const sigData = await createValidSignature(
              user,
              swag_Token_Intance.address,
              amount,
              deadline
            );
            await claim(user, amount, deadline, sigData, swag_Token_Intance);

            await updateClaimAndVestRate("20", "10");
          });

          it(` ------- User - 3 is Claimng With Amount Of 5000 Tokens at ClaimRate : ${
            claimRate / 1e18
          } And VestRate : ${vest_rate / 1e18}  ------- `, async () => {
            const user = testAccount(3);

            const amount = s(BigInt(toWei("5000", "ether")));

            const deadline = await deadlineTime("20");
            const sigData = await createValidSignature(
              user,
              swag_Token_Intance.address,
              amount,
              deadline
            );
            await claim(user, amount, deadline, sigData, swag_Token_Intance);
          });

          it(` ------- User - 4 is Claimng With Amount Of 4500 Tokens at ClaimRate : ${
            claimRate / 1e18
          } And VestRate : ${vest_rate / 1e18}  ------- `, async () => {
            const user = testAccount(4);

            const amount = s(BigInt(toWei("4500", "ether")));

            const deadline = await deadlineTime("20");
            const sigData = await createValidSignature(
              user,
              swag_Token_Intance.address,
              amount,
              deadline
            );
            await claim(user, amount, deadline, sigData, swag_Token_Intance);
          });

          it(` ------- User - 5 is Claimng With Amount Of 1111 Tokens at ClaimRate : ${
            claimRate / 1e18
          } And VestRate : ${vest_rate / 1e18}  ------- `, async () => {
            const user = testAccount(5);

            const amount = s(BigInt(toWei("1111", "ether")));

            const deadline = await deadlineTime("20");
            const sigData = await createValidSignature(
              user,
              swag_Token_Intance.address,
              amount,
              deadline
            );
            await claim(user, amount, deadline, sigData, swag_Token_Intance);
          });
        });
      });

      describe(" <----------------------> ██▓▓▒▒▒▒░░░░░░  R E L E A S E   F U N C T I O N  ░░░░░░▒▒▒▒▓▓██ <----------------------> ", function () {
        describe(" ", function () {
          it(` ------- User - 1 is Relaesing Vested Amount Of 130 Tokens at ClaimRate : ${
            claimRate / 1e18
          } And VestRate : ${vest_rate / 1e18} ------- `, async () => {
            await time.increase(time.duration.days(intervalData));
            const user = testAccount(1);
            await claimVesting(user);
          });
        });
      });

      // describe(" <----------------------> ██▓▓▒▒▒▒░░░░░░ SWAP TOKENS ░░░░░░▒▒▒▒▓▓██ <----------------------> ", function () {
      //   describe(" ", function () {
      //     it(" ------- USER - 6 ( USDT - 50 / DAX - 100 ) [ swapExactTokensForTokens ] ------- ", async () => {
      //       const user = testAccount(6);
      //       const amountIn = convertAmount(50);
      //       const amountOut = convertAmount(100);
      //       const path = [BEPUSDT_Instance.address, DAX_TOKEN_Instance.address];
      //       const beforeBalanceFrom = await balanceOf(BEPUSDT_Instance, user);
      //       const beforeBalanceTo = await balanceOf(DAX_TOKEN_Instance, user);
      //       await swapExactTokensForTokens(
      //         amountOut,
      //         amountIn,
      //         path,
      //         user,
      //         beforeBalanceFrom,
      //         beforeBalanceTo,
      //         false
      //       );

      //     });
      //     it(" ------- USER - 7 ( DAX - 1000 / USDT - 1 ) [ swapTokensForExactTokens ] ------- ", async () => {
      //       const user = testAccount(7);
      //       const amountIn = convertAmount(1000);
      //       const amountOut = convertAmount(1);
      //       const path = [DAX_TOKEN_Instance.address, BEPUSDT_Instance.address];
      //       const beforeBalanceFrom = await balanceOf(DAX_TOKEN_Instance, user);
      //       const beforeBalanceTo = await balanceOf(BEPUSDT_Instance, user);

      //       await swapTokensForExactTokens(
      //         amountOut,
      //         amountIn,
      //         path,
      //         user,
      //         beforeBalanceFrom,
      //         beforeBalanceTo,
      //         true
      //       );
      //     });
      //     it(" ------- USER - 8 ( DAX - 1 / USDT - 1000 ) [ swapExactTokensForTokens ] ------- ", async () => {
      //       const user = testAccount(8);
      //       const amountIn = convertAmount(1);
      //       const amountOut = convertAmount(1000);
      //       const path = [DAX_TOKEN_Instance.address, BEPUSDT_Instance.address];
      //       const beforeBalanceFrom = await balanceOf(DAX_TOKEN_Instance, user);
      //       const beforeBalanceTo = await balanceOf(BEPUSDT_Instance, user);

      //       await swapExactTokensForTokens(
      //         amountOut,
      //         amountIn,
      //         path,
      //         user,
      //         beforeBalanceFrom,
      //         beforeBalanceTo,
      //         true
      //       );

      //     });
      //     it(" ------- USER - 9 (  DAX - 2 / USDT - 1   ) [ swapTokensForExactTokens ] ------- ", async () => {
      //       const user = testAccount(9);
      //       const amountIn = convertAmount(2);
      //       const amountOut = convertAmount(1);
      //       const path = [DAX_TOKEN_Instance.address, BEPUSDT_Instance.address];
      //       const beforeBalanceFrom = await balanceOf(DAX_TOKEN_Instance, user);
      //       const beforeBalanceTo = await balanceOf(BEPUSDT_Instance, user);

      //       await swapTokensForExactTokens(
      //         amountOut,
      //         amountIn,
      //         path,
      //         user,
      //         beforeBalanceFrom,
      //         beforeBalanceTo,
      //         true
      //       );

      //     });
      //     it(" ------- USER -10 ( USDT - 100 / DAX - 1000)[ swapExactTokensForTokens ] ------- ", async () => {
      //       const user = testAccount(10);
      //       const amountIn = convertAmount(100);
      //       const amountOut = convertAmount(1000);
      //       const path = [BEPUSDT_Instance.address, DAX_TOKEN_Instance.address];
      //       const beforeBalanceFrom = await balanceOf(BEPUSDT_Instance, user);
      //       const beforeBalanceTo = await balanceOf(DAX_TOKEN_Instance, user);

      //       await swapExactTokensForTokens(
      //         amountOut,
      //         amountIn,
      //         path,
      //         user,
      //         beforeBalanceFrom,
      //         beforeBalanceTo,
      //         false
      //       );

      //     });
      //   });
      // });

      // describe("  <----------------------> ██▓▓▒▒▒▒░░░░░░ REMOVE LIQUIDITY ░░░░░░▒▒▒▒▓▓██ <----------------------> ", function () {
      //   describe(" ", function () {
      //     it(" ------- USER - 1 ( 100% LP ) [ removeLiquidity ] ------- ", async () => {
      //       const user = testAccount(1);
      //       const pairContract = await pairInstance();
      //       const liquidityBalance = String(Number(await balanceOf(pairContract, user)) / Number(2));

      //       await removeLiquidity(liquidityBalance, user);
      //     });
      //     it(" ------- USER - 2 ( 100% LP ) [ removeLiquidity ] ------- ", async () => {
      //       const user = testAccount(2);
      //       const pairContract = await pairInstance();
      //       const liquidityBalance = String(Number(await balanceOf(pairContract, user)) / Number(2));
      //       await removeLiquidity(liquidityBalance, user);
      //     });
      //     it(" ------- USER - 3 ( 100% LP ) [ removeLiquidity ] ------- ", async () => {
      //       const user = testAccount(3);
      //       const pairContract = await pairInstance();
      //       const liquidityBalance = String(Number(await balanceOf(pairContract, user)) / Number(2));
      //       await removeLiquidity(liquidityBalance, user);
      //     });
      //     it(" ------- USER - 4 ( 100% LP ) [ removeLiquidity ] ------- ", async () => {
      //       const user = testAccount(4);
      //       const pairContract = await pairInstance();
      //       const liquidityBalance = String(Number(await balanceOf(pairContract, user)) / Number(2));
      //       await removeLiquidity(liquidityBalance, user);
      //     });
      //     it(" ------- USER - 5 ( 100% LP ) [ removeLiquidity ] ------- ", async () => {
      //       const user = testAccount(5);
      //       const pairContract = await pairInstance();
      //       const liquidityBalance = String(Number(await balanceOf(pairContract, user)) / Number(2));
      //       await removeLiquidity(liquidityBalance, user);
      //     });

      //     // it(" ------- USER - 4 ( 100% LP ) [ removeLiquidityOnETH ] ------- ", async () => {
      //     //   const user = testAccount(4);
      //     //   const pairContract = await pairInstance();
      //     //   const liquidityBalance = String(Number(await balanceOf(pairContract, user)));

      //     //   await removeLiquidityETH(liquidityBalance, user);
      //     // });
      //     // it(" ------- USER - 5 ( 100% LP ) [ removeLiquidityOnETH ] ------- ", async () => {
      //     //   const user = testAccount(5);
      //     //   const pairContract = await pairInstance();
      //     //   const liquidityBalance = String(Number(await balanceOf(pairContract, user)));
      //     //   await removeLiquidityETH(liquidityBalance, user);
      //     // });

      //   });
      // });
    });
  });
});
